// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: pHEc37smer1Q6xynjofQze
// Component: bLfbJFXqGo9g4o
import * as React from "react"
import { Link } from "gatsby"
import * as p from "@plasmicapp/react-web"
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web"
import { useScreenVariants as useScreenVariantsv5FSi0UE2M7YwV } from "./PlasmicGlobalVariant__Screen" // plasmic-import: V5fSI0uE2M7ywV/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css"
import * as plasmic_library_plasmic_color_type_css from "../library_plasmic_color_type/plasmic_library_plasmic_color_type.module.css" // plasmic-import: seaQhLVS4bbjiGvJJrRwyL/projectcss
import * as projectcss from "./plasmic_planty.module.css" // plasmic-import: pHEc37smer1Q6xynjofQze/projectcss
import * as sty from "./PlasmicProductRow.module.css" // plasmic-import: bLfbJFXqGo9g4o/css
import Icon3Icon from "./icons/PlasmicIcon__Icon3" // plasmic-import: akpqReMOnsG-aF/icon
import plant1Featuredjpg0Fpk3BWu6MhZ4U from "./images/plant1Featuredjpg.png" // plasmic-import: 0Fpk3bWU6MhZ4u/picture
import plant2Featuredjpg1AiT3Tj0O65TZ from "./images/plant2Featuredjpg.png" // plasmic-import: 1aiT3tj0o65_tZ/picture
import plant5FeaturedjpgUZNnc3Csg5AVko from "./images/plant5Featuredjpg.png" // plasmic-import: uZNnc3Csg5aVko/picture
import plant9FeaturedjpgZsHgaDMsdDn0Be from "./images/plant9Featuredjpg.png" // plasmic-import: ZSHgaDMsdDN0BE/picture

export const PlasmicProductRow__VariantProps = new Array()

export const PlasmicProductRow__ArgProps = new Array()

function PlasmicProductRow__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props
  const $props = props.args
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsv5FSi0UE2M7YwV(),
  })

  return true ? (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_library_plasmic_color_type_css.plasmic_tokens,
        sty.root
      )}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.column__heCvD)}
      >
        <p.PlasmicImg
          alt={""}
          className={classNames(sty.img__meJh4)}
          displayHeight={"270px /* plasmic-token: dSJ4iuMuCkBucj */"}
          displayMaxHeight={"none"}
          displayMaxWidth={"100%"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"100%"}
          loading={"lazy"}
          src={{
            src: plant1Featuredjpg0Fpk3BWu6MhZ4U,
            fullWidth: 400,
            fullHeight: 400,
            aspectRatio: undefined,
          }}
        />

        {true ? (
          <div className={classNames(projectcss.all, sty.freeBox___2NfX)}>
            <Icon3Icon
              className={classNames(projectcss.all, sty.svg__oyWsy)}
              role={"img"}
            />
          </div>
        ) : null}

        <div className={classNames(projectcss.all, sty.freeBox__cEoSm)}>
          <p.PlasmicLink
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.link___7WSbH
            )}
            component={Link}
            platform={"gatsby"}
          >
            {"Nulla suscipit "}
          </p.PlasmicLink>

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___1HkDs
            )}
          >
            {"bigplants "}
          </div>

          <h5
            className={classNames(
              projectcss.all,
              projectcss.h5,
              projectcss.__wab_text,
              sty.h5__leMhI
            )}
          >
            {"$49.40 "}
          </h5>
        </div>
      </p.Stack>

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.column__rFlO)}
      >
        <p.PlasmicImg
          alt={""}
          className={classNames(sty.img__nQcS)}
          displayHeight={"270px /* plasmic-token: dSJ4iuMuCkBucj */"}
          displayMaxHeight={"none"}
          displayMaxWidth={"100%"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"100%"}
          loading={"lazy"}
          src={{
            src: plant2Featuredjpg1AiT3Tj0O65TZ,
            fullWidth: 400,
            fullHeight: 400,
            aspectRatio: undefined,
          }}
        />

        {true ? (
          <div className={classNames(projectcss.all, sty.freeBox__t6DdP)}>
            <Icon3Icon
              className={classNames(projectcss.all, sty.svg__vYqs4)}
              role={"img"}
            />
          </div>
        ) : null}

        <div className={classNames(projectcss.all, sty.freeBox___6ApUv)}>
          <p.PlasmicLink
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.link__tsyBt
            )}
            component={Link}
            platform={"gatsby"}
          >
            {"Integer porta"}
          </p.PlasmicLink>

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__tkLyc
            )}
          >
            {"cactuses"}
          </div>

          <h5
            className={classNames(
              projectcss.all,
              projectcss.h5,
              projectcss.__wab_text,
              sty.h5__hrb6C
            )}
          >
            {"$99.00 "}
          </h5>
        </div>
      </p.Stack>

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.column__viAiQ)}
      >
        <p.PlasmicImg
          alt={""}
          className={classNames(sty.img__qsdma)}
          displayHeight={"270px /* plasmic-token: dSJ4iuMuCkBucj */"}
          displayMaxHeight={"none"}
          displayMaxWidth={"100%"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"100%"}
          loading={"lazy"}
          src={{
            src: plant5FeaturedjpgUZNnc3Csg5AVko,
            fullWidth: 400,
            fullHeight: 400,
            aspectRatio: undefined,
          }}
        />

        {true ? (
          <div className={classNames(projectcss.all, sty.freeBox___0Ll9U)}>
            <Icon3Icon
              className={classNames(projectcss.all, sty.svg__biv15)}
              role={"img"}
            />
          </div>
        ) : null}

        <div className={classNames(projectcss.all, sty.freeBox__xdi2X)}>
          <p.PlasmicLink
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.link__s2XT
            )}
            component={Link}
            platform={"gatsby"}
          >
            {"Vestibulum eget"}
          </p.PlasmicLink>

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___60U4U
            )}
          >
            {"bigplants "}
          </div>

          <h5
            className={classNames(
              projectcss.all,
              projectcss.h5,
              projectcss.__wab_text,
              sty.h5___88BRz
            )}
          >
            {"$220.00 "}
          </h5>
        </div>
      </p.Stack>

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.column__mRaqO)}
      >
        <p.PlasmicImg
          alt={""}
          className={classNames(sty.img__t4286)}
          displayHeight={"270px /* plasmic-token: dSJ4iuMuCkBucj */"}
          displayMaxHeight={"none"}
          displayMaxWidth={"100%"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"100%"}
          loading={"lazy"}
          src={{
            src: plant9FeaturedjpgZsHgaDMsdDn0Be,
            fullWidth: 400,
            fullHeight: 400,
            aspectRatio: undefined,
          }}
        />

        {true ? (
          <div className={classNames(projectcss.all, sty.freeBox___4Bzrn)}>
            <Icon3Icon
              className={classNames(projectcss.all, sty.svg___7IpUs)}
              role={"img"}
            />
          </div>
        ) : null}

        <div className={classNames(projectcss.all, sty.freeBox__lyRtT)}>
          <p.PlasmicLink
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.link__y0B9A
            )}
            component={Link}
            platform={"gatsby"}
          >
            {"Fusce sagittis"}
          </p.PlasmicLink>

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__exNKn
            )}
          >
            {"cactuses"}
          </div>

          <h5
            className={classNames(
              projectcss.all,
              projectcss.h5,
              projectcss.__wab_text,
              sty.h5__qwsJt
            )}
          >
            {"$400.40 "}
          </h5>
        </div>
      </p.Stack>
    </p.Stack>
  ) : null
}

const PlasmicDescendants = {
  root: ["root"],
}

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicProductRow__ArgProps,
      internalVariantPropNames: PlasmicProductRow__VariantProps,
    })

    return PlasmicProductRow__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    })
  }
  if (nodeName === "root") {
    func.displayName = "PlasmicProductRow"
  } else {
    func.displayName = `PlasmicProductRow.${nodeName}`
  }
  return func
}

export const PlasmicProductRow = Object.assign(
  // Top-level PlasmicProductRow renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicProductRow
    internalVariantProps: PlasmicProductRow__VariantProps,
    internalArgProps: PlasmicProductRow__ArgProps,
  }
)

export default PlasmicProductRow
/* prettier-ignore-end */
